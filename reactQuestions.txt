=========================================================
DrawBacks
1.Promises :  if any of the logic fails in an array then entire logic fails inpromises.
2. callback : readablity is difficult and also time consuming to make any changes.
3 async/await : code can be see as a synchronous by syntex and easy to read and change
4. slice and splice
5. redux
6. lifecycle of a react app
7. div and span
8. debounce and throttle


=====Debouncing and throttling===========================================================================================
let save=()=>{
        console.log("calling API")
  }

   function debounce(func,timer=1000){
      let time;
      return(...args)=>{
        clearTimeout(time)
        time=setTimeout(()=>{
         func.apply(this,args)
        },timer)
      }
   }

    function throttle(func,timer=2000){
            let prev=0;
            return((...args)=>{
              let now=new Date().getTime()
              if(now-prev>timer){
                prev=now;
                return func(...args)
              }

            })
    }

   
     let deFunc=debounce(()=>{save()})
   let deFunc=throttle(()=>{save()})

====================================================================================================================================
Consume RESTAPI and display the data using Fetch Method : https://rickandmortyapi.com/api/character
 Add a Delete Button to delete a Particular Character.
 -------------------------------------------------------------------------------------------------------
import { Prev } from 'react-bootstrap/esm/PageItem';
import './App.css';
import { createContext, useCallback, useContext, useEffect, useMemo, useReducer, useRef, useState} from 'react';
import { debounce } from 'chart.js/helpers';







function App() {

  
  // let save=()=>{
  //       console.log("calling API")
  // }

  //  function debounce(func,timer=1000){
  //     let time;
  //     return(...args)=>{
  //       clearTimeout(time)
  //       time=setTimeout(()=>{
  //        func.apply(this,args)
  //       },timer)
  //     }
  //  }

  //   function throttle(func,timer=2000){
  //           let prev=0;
  //           return((...args)=>{
  //             let now=new Date().getTime()
  //             if(now-prev>timer){
  //               prev=now;
  //               return func(...args)
  //             }

  //           })
  //   }

   
  //    let deFunc=debounce(()=>{save()})
  //  let deFunc=throttle(()=>{save()})
 //https://rickandmortyapi.com/api/character

    let [val,setval]=useState([])
    
    useEffect(()=>{
       fetch('https://rickandmortyapi.com/api/character').then((e)=>{
       return e.json()
       }).then((data)=>{
         console.log(data.results)
        setval(data.results)})

     },[])


     function remove(index){
        console.log("val", val)
       let arr=[...val]
       console.log("arr",arr)
          arr.splice(index,1)
          console.log(arr)
          
          setval(arr)
     }


  return (
    <div className="App">
        {
         val?.map((el,index) => (
          <>
          <div>
           <img src={el.image} name="image"/>  
           <button onClick={()=>remove(index)}>Remove</button>
          </div>        
        </>
         ))
      } 

    </div>
  );
}


export default App

=============((Custom Hook))==============================================================================================================================
App.js
-----------
export default function App(){ 
 let {count,Incr}=useCouter(0)



  return (
    <div className="App">
      <h1>Hello {count}</h1>
      <button onClick={Incr}>+</button>
    </div>
  );
}


export default App

UseCounter.js
----------------------
export default function useCouter(initial,component){
  
       let [count,setCount]=useState(initial)
    
        let Incr=()=>{
            setCount(count+1)
        }

        return {count,Incr}

}

=====================useMemo, useCallback======================================================================================================================================
App.js
-----------------
function App() {
  
  let[count,setcount]=useState(0)
   
  let fun=useCallback(()=>{
    console.log("let's have fun")
},[])


  return (
    <div className="App">
      <h1>Hello {count}</h1>
      <button onClick={()=>{setcount(count+1)}}>+</button>
      <button onClick={()=>{setcount(count-1)}}>-</button>
    <Child fun={fun}/>
   
    </div>
  );
}

export default App;

child.js
-------------
 function Child({fun}){
    
      console.log("M child hu")

    return(
       <>
       <h2>M Child hu </h2>
       
      
       </>
    )
}

export default memo(Child)
===========REDUX===========================================================================================================
index.js
------------------------------------------
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';
import store from './store'
import { Provider } from 'react-redux';


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(

  <React.StrictMode>

   <Provider store={store}>
   <App />
   </Provider>

  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();


App.js
----------------------------------
    function App() {


    let sel=useSelector((state)=>{ return state.changeNum})
      let dispatch=useDispatch()
      

      return (
        <div className="App">
        <h1>Hello {sel}</h1>
        <button onClick={()=>{dispatch(Incr())}}>+</button>
        <button onClick={()=>{dispatch(Decr())}}>-</button>
        </div>
      );
    }


    export default App

 action/index.js
 ----------------
    
let Incr=()=>{
    return {type:"Incr"}
}

let Decr=()=>{
    return {type:"Decr"}
}

export {Incr,Decr}

reducer/index.js
---------------------
import {combineReducers}  from 'redux'
import {changeNum} from '../Reducer/changeNum'


 let rootReducer=combineReducers(changeNum)

 export default rootReducer

 reducer/changeNum.js
 ---------------------------
 let initial=0

let changeNum=(state=initial,action)=>{
    
    switch(action.type){
          case "Incr":
            return state+1;
            case "Decr":
                return state-1;
    }

}

export  {changeNum}

============================================================================================================================================================================================================================================================================
how we can call two api same time in react
------------------------------------------
Note:--The number of APIs you can call inside Promise.all is practically unlimited, but it depends on several factors such as system resources, network limitations, and the practicality of managing a large number of concurrent requests effectively.
------------------------------------------
const App = () => {
     
      let [data1,setdata1]=useState()
      let [data2,setdata2]=useState()
  

       useEffect( ()=> {
   
              async function fetchData(){
                let [res1,res2]=await Promise.all([
                  fetch('https://jsonplaceholder.typicode.com/todos/1'),
                  fetch('https://jsonplaceholder.typicode.com/todos/2')
                ])
              
                let result1=await res1.json()
                let result2=await res2.json()
                setdata1(result1)
                setdata2(result2)
                  
            
               }

                  fetchData()

              }
              ,[])
  return (
    <div>
      <h1>My React App</h1>
         {
          data1 && data2 ? (
            <div>
              <h1>{data1["id"]}</h1>
              <h2>{data2["title"]}</h2>
            </div>
           ) :<p>...Loading</p>
  
         }
    </div>
  );
};

export default App;
============================================================================================================================================================================================================================================================================
Error Boudries in React

App.JS
------

import React from 'react';
import ErrorBoundary from './ErrorBoundry';

const Alert=({message})=>{

     if(!typeof(message)==String || !message)
      {
         throw new Error("Message should be string")  
      }
      else{
        return(
          <h1>I am Alert</h1>
        )
      }
      

}


const App = () => {
  return (
    <div>
      <h1>My React App</h1>
      <ErrorBoundary>
      <Alert message={"sd"}  />
      </ErrorBoundary>
        
      
    </div>
  );
};

export default App;


ErrorBoundry.JS
----------------------
import React, { useState } from 'react';


class ErrorBoundary extends React.Component{
  
     constructor(props){
        super(props)
        this.state={hasError:false}
     }

      componentDidCatch(error){
        this.setState({hasError:true})
      }


       render(){
        if(this.state.hasError){
               return <h1>SOme Error</h1>
        }

        return this.props.children

       }

}


export default ErrorBoundary

==========================================================================
Create a function which uses fetch and work as an axios 
--------------------------------------------------------
const App = () => {

       let[apiResult,setapiResult]=useState()


  let networkCall=(url,methodCall,body)=>{

    const options = {
      method: methodCall,
      // headers: {
      // "Content-Type": "application/json",
      // },
      // body: JSON.stringify(body),
      }

       // Only include body if method is not GET
    if (methodCall.toUpperCase() !== 'GET') {
      options.headers = {
          "Content-Type": "application/json",
      };
      options.body = JSON.stringify(body);
  }

      return fetch(url,options).then((res)=>{
              
               if(!res.ok)
                {
                   throw new Error("SOmewthing went wrong")
                }
                return res.json()

        }).then((result)=>{  return result })
        .catch(error=>{
           console.log("Error in catch block",error)
        })
    
      

   }

        useEffect(()=>{
             networkCall("https://jsonplaceholder.typicode.com/todos","GET").then(data=>{
              // console.log("datais",data)
              setapiResult(data)
             })
             
           

        },[])





  return (
    <div>
      <h1>My React App</h1>
        {
            apiResult?.map((e)=>{
              return(
                <h1>{e.id}</h1>
              )
            })
        }

      
    </div>
  );
};

export default App;

----------------------------------------------------------------------------------------------------- 
[12:37] Ritesh Singh
let's consider a scenario where we need to fetch data from three different API endpoints.run these calls in parallel and ensure that we handle both successful responses and errors appropriately.
// URLs of the APIs to fetch data from
  const apiUrls = [
    'https://api.example.com/data1',
    'https://api.example.com/data2',
    'https://api.example.com/data3'
  ];
execute multiple api data in react and handle error.( Promise.all)
==================================================================
function App() {

    let [result1,setresult1]=useState([])
    let [result2,setresult2]=useState([])
    let [result3,setresult3]=useState([])

   let apiArr=['https://fakestoreapi.com/products/1','https://fakestoreapi.com/products/2','https://fakestoreapi.com/products/3']


    async function handleAPi(){
      
      try{
        let res1=await  fetch(apiArr[0])
      let res2=await  fetch(apiArr[1])
      let res3=await  fetch(apiArr[2])
      
      let resultt1=await res1.json()
      let resultt2=await res2.json()
      let resultt3=await res3.json()
         
      setresult1(resultt1)
      setresult2(resultt2)
      setresult3(resultt3)
      
      return [resultt1,resultt2,resultt3]
      }
      catch(err)
      {
        throw err
      }

    }


   function callAPi(){

    Promise.all([handleAPi()]).then(([resultt1,resultt2,resultt3])=>{
      console.log("R1 data is ",resultt1)
    })

   }



  useEffect(()=>{
    
    callAPi()

 },[])


  return (
    <div className="App">
     
        <p>
          Edit <code>src/App.js</code> and save to reload.
        </p>
      {
        result1 && result2 && (
             <>
               <h1>{result1["id"]}</h1>
               <h2>{result2.id}</h2>
             </>
        )
      }
              <h1>Third API result</h1>
      {
      result3 &&    
            (
              <>
              <p>{result3.id}</p>
              <p>{result3.description}</p>
              </>
            )
          
      }
       
    </div>
  );
}

export default App;
------------------------------------------------------------------------------------------------------------------------------
Why this is giving undefined after a result
===========================================
function a(x){
    return function b(y){
       console.log(x+y)
     }
     
}


let ay=a(2)
console.log(ay(3))

output
--------
5
undefined
------------------------------------------------------------------------------------------------------------------------------





