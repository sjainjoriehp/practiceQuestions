

function Debounce(func,timeout=300){

    let timer;

   return (...args)=>{
     clearTimeout(timer)
     tiemer=setTimeoyut(()=>{
      func.apply(this,args)
      },timeout)
    }
}


let save=()=>{
    console.log("Data save")
 }

   debounce(()=>saveInput())

=======================================================
function Throttle(func , delay){
        let prev=0;
  return((...args)=>{
     let now=new Date().getTime();
     if(now-prev >= delay)
       prev=new;
    
     return(func(...args))
      })

}


 throttleFunction(() => {
                console.log("button is clicked")
            }, 1500));

=========================================================
DrawBacks
1.Promises :  if any of the logic fails in an array then entire logic fails inpromises.
2. callback : readablity is difficult and also time consuming to make any changes.
3 async/await : code can be see as a synchronous by syntex and easy to read and change
4. slice and splice
5. redux
6. lifecycle of a react app
7. div and span
8. debounce and throttle
